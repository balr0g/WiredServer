/* $Id$ */

/*
 *  Copyright (c) 2003-2009 Axel Andersson
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#import "WPConfigManager.h"

@interface WPConfigManager(Private)

- (NSMutableDictionary *)_readConfig;
- (BOOL)_writeConfig:(NSDictionary *)config error:(WPError **)error;

@end


@implementation WPConfigManager(Private)

- (NSMutableDictionary *)_readConfig {
	NSMutableDictionary		*config;
	NSEnumerator			*enumerator;
	NSArray					*pair;
	NSString				*file, *line, *name, *value;
	
	config		= [NSMutableDictionary dictionary];
	file		= [NSString stringWithContentsOfFile:_configPath];
	enumerator	= [[file componentsSeparatedByString:@"\n"] objectEnumerator];
	
	while((line = [enumerator nextObject])) {
		if([line hasPrefix:@"#"])
			continue;
		
		pair = [line componentsSeparatedByString:@"="];
		
		if([pair count] == 2) {
			name	= [[pair objectAtIndex:0] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];;
			value	= [[pair objectAtIndex:1] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];;
			
			if([config objectForKey:name])
				[[config objectForKey:name] addObject:value];
			else
				[config setObject:[NSMutableArray arrayWithObject:value] forKey:name];
		}
	}
	
	return config;
}



- (BOOL)_writeConfig:(NSDictionary *)config error:(WPError **)error {
	NSEnumerator		*enumerator, *valueEnumerator;
	NSMutableString		*string;
	NSString			*key, *value;
	
	string = [NSMutableString string];

	[string appendFormat:[NSSWF:@"# This file was generated by %@ at %@\n", 
		[[self bundle] objectForInfoDictionaryKey:@"CFBundleExecutable"],
		[_dateFormatter stringFromDate:[NSDate date]]]];
	
	enumerator = [[[config allKeys] sortedArrayUsingSelector:@selector(compare:)] objectEnumerator];
	
	while((key = [enumerator nextObject])) {
		valueEnumerator = [[config objectForKey:key] objectEnumerator];
		
		while((value = [valueEnumerator nextObject]))
			[string appendFormat:@"%@ = %@\n", key, value];
	}
	
	return [[string dataUsingEncoding:NSUTF8StringEncoding] writeToFile:_configPath options:NSAtomicWrite error:(NSError **) &error];
}

@end



@implementation WPConfigManager

- (id)initWithConfigPath:(NSString *)configPath {
	self = [super init];
	
	_configPath = [configPath retain];
	
	_dateFormatter = [[WIDateFormatter alloc] init];
	[_dateFormatter setTimeStyle:NSDateFormatterShortStyle];
	[_dateFormatter setDateStyle:NSDateFormatterShortStyle];

	return self;
}



- (void)dealloc {
	[_configPath release];
	[_dateFormatter release];
	
	[super dealloc];
}



#pragma mark -

- (BOOL)setString:(NSString *)string forConfigWithName:(NSString *)name andWriteWithError:(WPError **)error {
	NSMutableDictionary		*config;
	
	config = [self _readConfig];
	
	[config setObject:[NSArray arrayWithObject:string] forKey:name];
	
	return [self _writeConfig:config error:error];
}



- (NSString *)stringForConfigWithName:(NSString *)name {
	NSDictionary		*config;
	
	config = [self _readConfig];
	
	if([[config objectForKey:name] count] == 0)
		return NULL;
	
	return [[config objectForKey:name] objectAtIndex:0];
}

@end
